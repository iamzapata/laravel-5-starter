{"version":3,"sources":["utils.js","app.js"],"names":[],"mappingslOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\n * Controls for loading gif.\n */\nvar Loading = (function(selector, fadeOut){\n\n    // Provide default values if none given.\n    var fadeOut = fadeOut || 100;\n    var selector = selector || \".selector\";\n\n    /**\n     * Public mthod.\n     */\n    return {\n        show: function() {\n            $(selector).show();\n        },\n\n        hide: function() {\n\n            $(selector).fadeOut(fadeOut);\n        }\n    }\n\n}());\n\n\n/**\n * Use to display server errors, typically 500 response codes,\n * But can be used for anything else.\n */\nvar ServerError = (function(response) {\n\n    var defaultMessage = \"There semes to be a problem with the server.  \"+\n            \"Please try again or contact support if this message persists\"\n\n    var message = response.error_message || defaultMessage;\n\n    var title = response.error_title || \"Whoops!\";\n\n    swal({\n        title: title,\n        text: message,\n        html:true,\n        type: \"error\",\n        confirmButtonColor: CONSTANTS.colors.error,\n        confirmButtonText: \"Ok\"\n    });\n\n});\n\n/**\n * Handle bars compile wrapper,\n * used for convenience.\n */\nvar HandleBarsCompile = (function(templateId, context){\n\n    var context = context || {};\n\n    var source = $(templateId).html();\n\n    var template = Handlebars.compile(source);\n\n    return template(context);\n});\n\n/**\n * This functions grabs all input fields from the provided form with id.\n */\nvar FormInputGet = (function(formId) {\n\n    return $(id).map(function() {\n\n        return {\n            name: this.name,\n            value: this.value\n        }\n\n    });\n\n});\n\n/**\n * Serialize given form.\n */\nvar ObjectSerialize = (function(identifier) {\n\n    var elements = $(identifier).serializeArray();\n\n    return _(elements).reduce(function(element, field)\n    {\n        element[field.name] = field.value;\n        return element\n\n    }, {});\n\n});\n\n/**\n * Show swal success alert.\n */\nSuccessMessage = (function(title, message, callback){\n    return swal({title: title,\n            text: message,\n            html: true,\n            type: \"success\",\n            confirmButtonColor: CONSTANTS.colors.success,\n            confirmButtonText: \"Ok\"},\n        function(){\n            if(typeof(callback)=='function')\n            {\n                callback();\n            }\n        });\n});\n\n/**\n * Show swal info alert.\n */\nInfoMessage = (function(title, message, callback){\n    return swal({title: title,\n            text: message,\n            html: true,\n            type: \"info\",\n            confirmButtonColor: CONSTANTS.colors.info,\n            confirmButtonText: \"Ok\"},\n        function(){\n            if(typeof(callback)=='function')\n            {\n                callback();\n            }\n        });\n});\n\n\n/**\n * Show swal warning alert.\n */\nWarningMessage = (function(title, message, callback){\n    return swal({title: title,\n            text: message,\n            html: true,\n            type: \"warning\",\n            confirmButtonColor: CONSTANTS.colors.warning,\n            confirmButtonText: \"Ok\"},\n        function(){\n            if(typeof(callback)=='function')\n            {\n                callback();\n            }\n        });\n});\n\n/**\n * Show swal error message.\n */\nErrorMessage = (function(title, message, callback){\n    var message = message || 'A server error has occurred, please try again or contact application support';\n    return swal({title: title,\n            text: message,\n            html: true,\n            type: \"error\",\n            confirmButtonColor: CONSTANTS.colors.error,\n            confirmButtonText: \"Ok\"},\n        function(){\n            if(typeof(callback)=='function')\n            {\n                callback();\n            }\n        });\n});\n\n/**\n * Show swal confirm message for deleting resources.\n */\nConfirmDelete = (function(title, message, options, callback){\n\n    var title = title || \"Are you sure?\";\n    var text = message || \"You will not be able to undo this action!\";\n    return swal({\n        title: title,\n        text: text,\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#DD6B55\",\n        confirmButtonText: \"Yes, delete it!\",\n        closeOnConfirm: false\n    }, function(){\n\n        $.when(callback()).then(function() {\n            swal(options.uppercase+\" Deleted!\", \"The \"+options.lowercase+\" has been deleted.\", \"success\");\n        });\n\n    });\n});\n\n/**\n * Assign validation errors returned with ajax response to corresponding form field.\n */\nvar AssignErrorToField = (function (error, key) {\n\n    var field = $('[name='+key+']').length == 0 ? $(\"#\"+key) : $('[name='+key+']');\n    $(field).parents('.form-group').find('.validation-error').html(error);\n\n});\n\n/**\n * Loops through validation errors and calls function that renders them.\n */\nvar ShowErrors = (function (response) {\n\n    $('.validation-error').text('');\n\n    var json = response.responseJSON;\n    var text = JSON.parse(response.responseText);\n\n    var errors = typeof json !== 'undefined' ? json : text;\n\n    _.each(errors, function(num, key) {\n        console.log(num);\n        AssignErrorToField(num, key);\n    });\n\n});\n\n\n\n","/**\n * Application declaration.\n */\nvar Application = Marionette.Application.extend({\n\n    initialize: function()\n    {\n        console.log('Application Startup');\n    }\n\n});\n\n/**\n * Application Instance.\n *\n * Refer to http://marionettejs.com/docs to see available methods\n * of the marionette application object.\n *\n */\nvar App = new Application();\n\n/**\n * Application Options.\n *\n * You can pass any configuration paramters need for the application to run\n * using an abject like the one bellow.\n *\n */\noptions = {\n    \"container\": \"#someId\",\n    \"version\": \"1.0.0\",\n    \"baseUrl\": \"\",\n    \"apiUrl\": \"\"\n}\n\n/**\n * Start me up !!\n */\nApp.start(options);\n\n\n\n\n\n"],"sourceRoot":"/source/"}